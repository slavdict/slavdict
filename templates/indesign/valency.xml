{% macro valency(m, peer_meanings_loop, parent_meanings_loop,
                    collogroups_loop, child_meanings) %}
{% from 'indesign/example.xml' import example with context %}

{% set MSC17 = 'q' %}{# безличное упортеление глагола #}
{% if m.special_case == MSC17 %}
    <x aid:cstyle="Em">безл.</x>{{ space }}
{% endif %}

{% if m.substantivus_csl %}
    {{ m.substantivus_csl_ucs|
         ind_civil_injection("Valency", "CSLSegmentEm", "Text") }}
    {{ space }}
{% endif %}

{% if m.meaning %}
    {% if not '{' in m.meaning and not '}' in m.meaning %}
        {{ m.host_entry.base_vars[0].idem_ucs |
            ind_cslav_words("CSLSegmentEm", "Text") }}{{ space }}
    {% endif %}
    <x aid:cstyle="Text">{{ m.meaning |
        ind_valency(m.host_entry.base_vars[0].idem,
                    "CSLSegmentEm", "Text", "Em", "Valency") }}</x>
    {{ space }}
{% endif %}

{% if m.gloss %}
    {{ backspace }}{{ space }}
    <x aid:cstyle="Text">(=</x>{{ nbsp }}
    <x aid:cstyle="Text">{{ m.gloss|ind_cslav_injection("CSLSegment") }}</x>
    <x aid:cstyle="Text">)</x>
    {{ space }}
{% endif %}

{% for e in m.examples %}
    {{ example(e, examples_loop=loop,
               peer_meanings_loop=peer_meanings_loop,
               parent_meanings_loop=parent_meanings_loop,
               collogroups_loop=collogroups_loop,
               child_meanings=child_meanings,
               entry=m.host_entry, meaning=m) }}
{% endfor %}


{% endmacro %}
{# vim: set ft=django.xml: #}
