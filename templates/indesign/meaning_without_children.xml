{% macro meaning(m, peer_meanings_loop, parent_meanings_loop,
                    collogroups_loop, child_meanings) %}
{% from 'indesign/example.xml' import example with context %}


{% for orthvar_ucs in m.orthvars %}
    {% if not loop.first %}
        {% if loop.last %}
            {{ backspace }}{{ space }}
            <x aid:cstyle="Em">и</x>{{ space }}
        {% else %}
            {{ backspace }},{{ space }}
        {% endif %}
    {% endif %}
    {{ orthvar_ucs|ind_cslav_words("CSLSegmentEm") }}{{ space }}
{% endfor %}


{% if m.special_case == 'a' %}{# канонич. #}

    <x aid:cstyle="Em">канонич.</x>{{ space }}

{% elif m.special_case == 'd' %}{# дат. #}

    <x aid:cstyle="Em">дат.</x>{{ space }}
    {% for form_ucs in m.substantivus_forms %}
        {% if not loop.first %}
            {{ backspace }},{{ space }}
        {% endif %}
        {{ form_ucs|ind_cslav_words("CSLSegmentEm") }}{{ space }}
    {% endfor %}

{% elif m.special_case == 'e' %}{# твор. ед. в роли нареч. #}

    <x aid:cstyle="Em">твор. ед.</x>{{ space }}
    {{ m.substantivus_csl_ucs|ind_cslav_words("CSLSegmentEm") }}{{ space }}
    <x aid:cstyle="Em">в{{ nbsp }}роли нареч.</x>{{ space }}

{% elif m.special_case == 'l' %}{# в роли нареч. #}

    {{ m.substantivus_csl_ucs|ind_cslav_words("CSLSegmentEm") }}{{ space }}
    <x aid:cstyle="Em">в{{ nbsp }}роли нареч.</x>{{ space }}

{% elif m.special_case == 'h' %}{# имя собств. #}

    <x aid:cstyle="Em">имя собств.</x>{{ space }}

{% elif m.special_case == 'i' %}{# топоним #}

    <x aid:cstyle="Em">топоним</x>{{ space }}

{% elif m.special_case == 'k' %}{# мн. #}

    <x aid:cstyle="Em">мн.</x>{{ space }}
    {{ m.substantivus_csl_ucs|ind_cslav_words("CSLSegmentEm") }}{{ space }}

{% elif m.substantivus %}

    {% for form_ucs in m.substantivus_forms %}
        {% if not loop.first %}
            {{ backspace }},{{ space }}
        {% endif %}

        {% if (loop.last or loop.index == 3) and
                m.substantivus_type == 'b' %}{# ср. род, мн. число #}
            {{ backspace }}{{ space }}
            <x aid:cstyle="Em">мн.</x>{{ space }}
        {% elif loop.last and m.substantivus_type == 'e' %}{# ж. род, ед. число #}
            {{ backspace }}{{ space }}
            <x aid:cstyle="Em">ж.</x>{{ space }}
        {% endif %}

        {{ form_ucs|ind_cslav_words("CSLSegmentEm") }}{{ space }}
    {% endfor %}

    {% if m.special_case == 'j' %}{# преимущ. #}
        {{ backspace }}{{ space }}
        <x aid:cstyle="Em">преимущ.</x>{{ space }}
    {% endif %}

    {% if m.substantivus_forms %}
        {{ backspace }}{{ space }}
    {% endif %}
    <x aid:cstyle="Em">в{{ nbsp }}роли сущ.</x>
    {{ space }}

{% elif m.substantivus_csl %}

    {{ m.substantivus_csl_ucs|ind_cslav_words("CSLSegmentEm") }}{{ space }}

{% endif %}


{% if m.figurative %}
    <x aid:cstyle="Em">перен.</x>{{ space }}
{% endif %}

{% if m.meaning %}
    <meaning aid:cstyle="Text">{{ m.meaning|
        ind_cslav_injection("CSLSegment")|
        ind_regex("Em", '(?<![А-Яа-я])(?:перен|букв|зд|см|ср)\\.')|
        ind_regex("Greek", '[\u0370-\u03FF\u1F00-\u1FFE]+')|
        good_slash("Text") }}</meaning>
{% endif %}

{% if m.gloss %}
    {% if m.meaning %}
        {{ backspace }};{{ space }}
    {% endif %}
    <gloss aid:cstyle="Em">{{ m.gloss |
        ind_cslav_injection("CSLSegment") |
        ind_regex("Text", '‘[^’]+’') |
        ind_regex("GreekEm", '[\u0370-\u03FF\u1F00-\u1FFE]+') |
        ind_regex("Text", '(?<=Син\.\sпер\.\s)Керенгаппух|бдолах|сирияне|сирийский|сириец|земля Уц') |
        ind_regex("Text", '(?<=Септ\.\s)Авситидийская') |
        good_slash("Text")
        }}</gloss>
    {{ space }}
{% endif %}

{% if (m.contexts or m.substantivus or m.figurative or m.meaning or m.gloss) and m.examples %}
    {{ backspace }}:{{ space }}
{% endif %}

{% for e in m.examples %}
    {{ example(e, examples_loop=loop,
               peer_meanings_loop=peer_meanings_loop,
               parent_meanings_loop=parent_meanings_loop,
               collogroups_loop=collogroups_loop,
               child_meanings=child_meanings) }}
{% endfor %}


{% endmacro %}
{# vim: set ft=django.xml: #}
