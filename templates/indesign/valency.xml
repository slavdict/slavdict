{% macro valency(m, peer_meanings_loop, parent_meanings_loop,
                    collogroups_loop, child_meanings) %}
{% from 'indesign/example.xml' import example with context %}

{% if m.substantivus_csl %}
    {{ m.substantivus_csl_ucs|
         ind_civil_injection("Valency", "CSLSegmentEm", "Text")|
         good_slash("Text")
         }}
    {{ space }}
{% endif %}

{% if m.meaning %}
    {{ m.host_entry.base_vars[0].idem_ucs|ind_cslav_words("CSLSegmentEm", "Text") }}{{ space }}
    {% for frame in m.meaning.split(";") %}
        {% if loop.first %}
            {# pass #}
        {% else %}
            {{ backspace }}<x aid:cstyle="Text">;</x>{{ space }}
        {% endif %}
        <x aid:cstyle="Text">{{ frame|trim|
            ind_cslav_injection("CSLSegmentEm")|
            ind_regex("Valency", '[а-я]+[\\-\u2011]л\\.')|
            ind_regex("Em", 'с\\s(?:придат|инф)\\.')|
            good_slash("Text")
            }}</x>

        {{ space }}
    {% endfor %}
{% endif %}

{% if m.gloss %}
    {{ backspace }}{{ space }}
    <x aid:cstyle="Text">(=</x>{{ nbsp }}
    <x aid:cstyle="Text">{{ m.gloss|ind_cslav_injection("CSLSegment")|
                                good_slash("Text") }}</x>
    <x aid:cstyle="Text">)</x>
    {{ space }}
{% endif %}

{% for e in m.examples %}
    {{ example(e, examples_loop=loop,
               peer_meanings_loop=peer_meanings_loop,
               parent_meanings_loop=parent_meanings_loop,
               collogroups_loop=collogroups_loop,
               child_meanings=child_meanings,
               entry=m.host_entry, meaning=m) }}
{% endfor %}


{% endmacro %}
{# vim: set ft=django.xml: #}
